// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pi/pi.proto

package pi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestSend struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestSend) Reset()         { *m = TestSend{} }
func (m *TestSend) String() string { return proto.CompactTextString(m) }
func (*TestSend) ProtoMessage()    {}
func (*TestSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_d17932267e34e30b, []int{0}
}

func (m *TestSend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestSend.Unmarshal(m, b)
}
func (m *TestSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestSend.Marshal(b, m, deterministic)
}
func (m *TestSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSend.Merge(m, src)
}
func (m *TestSend) XXX_Size() int {
	return xxx_messageInfo_TestSend.Size(m)
}
func (m *TestSend) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSend.DiscardUnknown(m)
}

var xxx_messageInfo_TestSend proto.InternalMessageInfo

func (m *TestSend) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TestReceive struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestReceive) Reset()         { *m = TestReceive{} }
func (m *TestReceive) String() string { return proto.CompactTextString(m) }
func (*TestReceive) ProtoMessage()    {}
func (*TestReceive) Descriptor() ([]byte, []int) {
	return fileDescriptor_d17932267e34e30b, []int{1}
}

func (m *TestReceive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestReceive.Unmarshal(m, b)
}
func (m *TestReceive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestReceive.Marshal(b, m, deterministic)
}
func (m *TestReceive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestReceive.Merge(m, src)
}
func (m *TestReceive) XXX_Size() int {
	return xxx_messageInfo_TestReceive.Size(m)
}
func (m *TestReceive) XXX_DiscardUnknown() {
	xxx_messageInfo_TestReceive.DiscardUnknown(m)
}

var xxx_messageInfo_TestReceive proto.InternalMessageInfo

func (m *TestReceive) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CountRequest struct {
	Skip                 int64    `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountRequest) Reset()         { *m = CountRequest{} }
func (m *CountRequest) String() string { return proto.CompactTextString(m) }
func (*CountRequest) ProtoMessage()    {}
func (*CountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d17932267e34e30b, []int{2}
}

func (m *CountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountRequest.Unmarshal(m, b)
}
func (m *CountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountRequest.Marshal(b, m, deterministic)
}
func (m *CountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountRequest.Merge(m, src)
}
func (m *CountRequest) XXX_Size() int {
	return xxx_messageInfo_CountRequest.Size(m)
}
func (m *CountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountRequest proto.InternalMessageInfo

func (m *CountRequest) GetSkip() int64 {
	if m != nil {
		return m.Skip
	}
	return 0
}

type CountResponse struct {
	Count                []int64  `protobuf:"varint,1,rep,packed,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountResponse) Reset()         { *m = CountResponse{} }
func (m *CountResponse) String() string { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()    {}
func (*CountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d17932267e34e30b, []int{3}
}

func (m *CountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountResponse.Unmarshal(m, b)
}
func (m *CountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountResponse.Marshal(b, m, deterministic)
}
func (m *CountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountResponse.Merge(m, src)
}
func (m *CountResponse) XXX_Size() int {
	return xxx_messageInfo_CountResponse.Size(m)
}
func (m *CountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountResponse proto.InternalMessageInfo

func (m *CountResponse) GetCount() []int64 {
	if m != nil {
		return m.Count
	}
	return nil
}

func init() {
	proto.RegisterType((*TestSend)(nil), "pi.TestSend")
	proto.RegisterType((*TestReceive)(nil), "pi.TestReceive")
	proto.RegisterType((*CountRequest)(nil), "pi.CountRequest")
	proto.RegisterType((*CountResponse)(nil), "pi.CountResponse")
}

func init() { proto.RegisterFile("pi/pi.proto", fileDescriptor_d17932267e34e30b) }

var fileDescriptor_d17932267e34e30b = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x4d, 0x4e, 0x87, 0x30,
	0x10, 0xc5, 0xff, 0x08, 0x7e, 0x30, 0x60, 0xd4, 0x89, 0x0b, 0xc2, 0x8a, 0x34, 0x1a, 0x58, 0x61,
	0xa2, 0x89, 0x17, 0xd0, 0x03, 0x90, 0xea, 0x05, 0x14, 0x27, 0x64, 0xa2, 0xd2, 0xca, 0x14, 0xcf,
	0x6f, 0x5a, 0x20, 0x61, 0xe5, 0xae, 0xef, 0xf5, 0x37, 0x1f, 0x6f, 0x20, 0xb3, 0x7c, 0x67, 0xb9,
	0xb5, 0x93, 0x71, 0x06, 0x8f, 0x2c, 0xab, 0x1b, 0x38, 0x7b, 0x25, 0x71, 0x2f, 0x34, 0x7e, 0x60,
	0x01, 0xa7, 0xdf, 0x24, 0xf2, 0x36, 0x50, 0x11, 0x55, 0x51, 0x93, 0xea, 0x4d, 0xaa, 0x1a, 0x32,
	0x4f, 0x69, 0xea, 0x89, 0x7f, 0xe9, 0x1f, 0x50, 0x41, 0xfe, 0x64, 0xe6, 0xd1, 0x69, 0xfa, 0x99,
	0x49, 0x1c, 0x22, 0x24, 0xf2, 0xc9, 0x36, 0x60, 0xb1, 0x0e, 0x6f, 0x75, 0x0b, 0xe7, 0x2b, 0x23,
	0xd6, 0x8c, 0x42, 0x78, 0x0d, 0xc7, 0xbd, 0x37, 0x8a, 0xa8, 0x8a, 0x9b, 0x58, 0x2f, 0xe2, 0xfe,
	0x0b, 0xd2, 0x8e, 0x03, 0x48, 0x13, 0x3e, 0xae, 0x35, 0x1d, 0x3f, 0xf3, 0xc0, 0x4e, 0xf0, 0xb2,
	0xb5, 0xdc, 0xee, 0x47, 0x95, 0x57, 0x3b, 0x67, 0x69, 0xac, 0x0e, 0x58, 0x43, 0xe2, 0x17, 0xc7,
	0x0b, 0xff, 0xb9, 0x8b, 0x50, 0xe6, 0x9b, 0xe1, 0x93, 0xab, 0xc3, 0xfb, 0x49, 0x38, 0xc9, 0xc3,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0xee, 0xa0, 0x91, 0x21, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PiCounterClient is the client API for PiCounter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PiCounterClient interface {
	// Sends a greeting
	CountPiDigits(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	Test(ctx context.Context, in *TestReceive, opts ...grpc.CallOption) (*TestSend, error)
}

type piCounterClient struct {
	cc *grpc.ClientConn
}

func NewPiCounterClient(cc *grpc.ClientConn) PiCounterClient {
	return &piCounterClient{cc}
}

func (c *piCounterClient) CountPiDigits(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/pi.PiCounter/CountPiDigits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piCounterClient) Test(ctx context.Context, in *TestReceive, opts ...grpc.CallOption) (*TestSend, error) {
	out := new(TestSend)
	err := c.cc.Invoke(ctx, "/pi.PiCounter/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PiCounterServer is the server API for PiCounter service.
type PiCounterServer interface {
	// Sends a greeting
	CountPiDigits(context.Context, *CountRequest) (*CountResponse, error)
	Test(context.Context, *TestReceive) (*TestSend, error)
}

// UnimplementedPiCounterServer can be embedded to have forward compatible implementations.
type UnimplementedPiCounterServer struct {
}

func (*UnimplementedPiCounterServer) CountPiDigits(ctx context.Context, req *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPiDigits not implemented")
}
func (*UnimplementedPiCounterServer) Test(ctx context.Context, req *TestReceive) (*TestSend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

func RegisterPiCounterServer(s *grpc.Server, srv PiCounterServer) {
	s.RegisterService(&_PiCounter_serviceDesc, srv)
}

func _PiCounter_CountPiDigits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiCounterServer).CountPiDigits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pi.PiCounter/CountPiDigits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiCounterServer).CountPiDigits(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiCounter_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReceive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiCounterServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pi.PiCounter/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiCounterServer).Test(ctx, req.(*TestReceive))
	}
	return interceptor(ctx, in, info, handler)
}

var _PiCounter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pi.PiCounter",
	HandlerType: (*PiCounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountPiDigits",
			Handler:    _PiCounter_CountPiDigits_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _PiCounter_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pi/pi.proto",
}
